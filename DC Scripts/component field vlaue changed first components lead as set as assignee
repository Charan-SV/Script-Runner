import org.apache.log4j.Logger;
import org.apache.log4j.Level;
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.event.issue.IssueEvent
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.util.ImportUtils

//def logs = Logger.getLogger("SetAssigneeWithComponentLead")
//logs.setLevel(Level.DEBUG)
//logs.debug "log message"

// Checking if the "Components" field value has changed.
def events = event as IssueEvent;
def changeHistoryManager = ComponentAccessor.changeHistoryManager;
def changeItems = changeHistoryManager.getChangeHistoryById(event.changeLog.id as Long).changeItemBeans
if(!changeItems.any{it.field == 'Component'}){
    return //nothing to do when Components is not changed
}

MutableIssue issue = events.issue as MutableIssue
def currentUser = ComponentAccessor.jiraAuthenticationContext.loggedInUser

// If only update assignee, if issue type not Deviation.
if (issue.issueType.name != "Deviation")  {

    def componentLeads = issue.components*.componentLead

    if (componentLeads) {
        if (componentLeads.first() != issue.getAssignee()) {

            // Set the assignee field to the component lead
            issue.setAssignee(componentLeads.first())
            ComponentAccessor.issueManager.updateIssue(currentUser, issue, EventDispatchOption.DO_NOT_DISPATCH, false)

            // Performing reindex of issue
            boolean wasIndexing = ImportUtils.isIndexIssues()
            ImportUtils.setIndexIssues(true)
            ComponentAccessor.getComponent(IssueIndexingService).reIndex(issue)
            ImportUtils.setIndexIssues(wasIndexing)
        }
    }
}
