import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.issue.link.IssueLinkManager
import com.atlassian.jira.issue.link.IssueLink
import com.opensymphony.workflow.InvalidInputException

import java.util.List

log.setLevel(org.apache.log4j.Level.DEBUG)
InvalidInputException e = new InvalidInputException();

IssueManager issueManager = ComponentAccessor.getIssueManager();
IssueLinkManager issueLinkManager = ComponentAccessor.getIssueLinkManager();
List<String> LinkIDS = new ArrayList<String>();

long iID;
int count = 0;
iID = issue.getId();

if (issue.getIssueType().getName() == "Epic")
{

    List<IssueLink> issueLinksforEpic = issueLinkManager.getOutwardLinks(iID)
    log.debug("List of issues  " + issueLinksforEpic)
    for (IssueLink Issuelink : issueLinksforEpic)
    {
        Issue IssuesinEpic = Issuelink.getDestinationObject()
        String status = IssuesinEpic.getStatus().getSimpleStatus().getName()
        if (Issuelink.getIssueLinkType().getName().equalsIgnoreCase("Epic-Story Link") && !(status.equalsIgnoreCase("Done (No QA Required)") || status.equalsIgnoreCase("Closed") || status.equalsIgnoreCase("Cancel") || status.equalsIgnoreCase("Done") || status.equalsIgnoreCase("Closed - Fixed") || status.equalsIgnoreCase("Closed - No Changes") || status.equalsIgnoreCase("Approved Deferred") || status.equalsIgnoreCase("Review Completed") || status.equalsIgnoreCase("Release Approved") || status.equalsIgnoreCase("Released")))
        {
            LinkIDS.add(IssuesinEpic.getKey())
            count = ++count
        }
    }
    if (count != 0)
    {

        e.addError("Please Close/Cancel/Done Issues in Epic to proceed: " + LinkIDS);
        throw e;
    }
}
